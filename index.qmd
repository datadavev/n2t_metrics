---
title: "N2T Resolution Metrics"
jupyter: python3
execute:
  echo: false
format:
  html:
    toc: false
    theme:
      - cosmo
fig-cap-location: top
---

```{python}
import os
import sqlite3
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import IPython.display
import itables
month_map = {
  1: "January",
  2: "February",
  3: "March",
  4: "April",
  5: "May",
  6: "June",
  7: "July",
  8: "August",
  9: "September",
  10: "October",
  11: "November",
  12: "December"
}

itables.init_notebook_mode(all_interactive=True)
ANALYSIS_DIR = "analysis"
ANALYSIS_DB = os.path.join(os.path.abspath(ANALYSIS_DIR),"logs.sqlite3")
CN = sqlite3.connect(ANALYSIS_DB)
# Load the country names and codes
ccodes = pd.read_csv("geo/country_codes.csv", quotechar='"')
ccodes.rename(mapper={"Alpha-2 code":"country_code", "Alpha-3 code":"iso_a3"}, axis=1, inplace=True)
ccodes = ccodes.apply(lambda x: x.str.strip(' "'))
MONTH=9
```


```{python}
#| label: resolve-counts
def tick_formatter(y,pos):
  return f"{y:,.0f}"

# resolutions per day
sql = '''select count(*) as resolutions,
  d as Day,
  m as month
  from logs
  where month=?
  group by Day
  order by Day asc;
'''
df = pd.read_sql_query(sql, CN, params=(MONTH,))
fig, ax = plt.subplots(figsize=(8,3))
#df.plot(ax=ax, x='Day', y='resolutions');
ax.yaxis.set_major_formatter(tick_formatter)
_ = df.plot(
      ax=ax, 
      kind="line", 
      title=f"Resolve requests serviced by N2T for the month of {month_map[MONTH]}.",
      x="Day", y="resolutions", xlim=(0,31), ylabel="Resolutions", 
      legend=False, style="k:"
    )
```


```{python}
#| label: count_scheme
#| fig-cap: Resolve requests for different identifier schemes. (Note that a few false "schemes" appear in the log processing output, this is a bug in the log processor).
# counts per scheme
sql = '''select id_scheme as Scheme,
  count(*) as Resolutions
  from logs
  where m=?
  group by Scheme
  order by Resolutions desc;'''
df = pd.read_sql_query(sql, CN, params=(MONTH,))
itables.show(df,
  scrollY="480px",
  scrollCollapse=True,
  paging=False,
  dom='tpr',
  classes=['compact','hover']
)
```

```{python}
#| label: count_naan
#| fig-cap: Resolve requests for ARK identifiers grouped by NAAN.

sql = '''select '<a target="_blank" href="https://n2t.net/ark:'||substr(id_value, 0, instr(id_value, '/'))||'??">'||substr(id_value, 0, instr(id_value, '/'))||'</a>' as NAAN, 
  count(*) as n 
  from logs 
  where m=? AND id_scheme='ark' 
  group by NAAN order by n desc;
'''
df = pd.read_sql_query(sql, CN, params=(MONTH,))
itables.show(df,
  scrollY="480px",
  scrollCollapse=True,
  paging=False,
  dom='tpr',
  classes=['compact','hover']
)
```

```{python}
#| label: count_country
#| fig-cap: Count of resolve requests grouped by country.
sql = '''select count(*) as n,
country_code,
m from logs
where m=?
group by country_code
order by n desc'''
df = pd.read_sql_query(sql, CN, params=(MONTH,))
df_merged = pd.merge(
  df,
  ccodes,
  how="left",
  on=["country_code"]
)
#df_merged.style.hide(axis=0)
dfm = df_merged[df_merged['m']==MONTH].loc[:, ['n','Country', 'country_code']].drop_duplicates(subset=['country_code'])
_ = dfm.style.hide(axis=0)
itables.show(
  dfm,
  scrollY="480px",
  scrollCollapse=True,
  paging=False,
  dom='tpr',
  classes=['compact','hover']
)
```

```{python}

#| column: page
import geopandas
import matplotlib.colors
import numpy as np
def truncate_colormap(cmap, minval=0.0, maxval=1.0, n=100):
    new_cmap = matplotlib.colors.LinearSegmentedColormap.from_list(
        'trunc({n},{a:.2f},{b:.2f})'.format(n=cmap.name, a=minval, b=maxval),
        cmap(np.linspace(minval, maxval, n)))
    return new_cmap
world = geopandas.read_file(
    geopandas.datasets.get_path('naturalearth_lowres')
)
ccodes = pd.read_csv("geo/country_codes.csv", quotechar='"')
ccodes.rename(mapper={"Alpha-2 code":"country_code", "Alpha-3 code":"iso_a3"}, axis=1, inplace=True)
ccodes = ccodes.apply(lambda x: x.str.strip(' "'))
merged = pd.merge(df.set_index("country_code"), ccodes.set_index("country_code"), how="left", on=["country_code"])
wmerged = pd.merge(
  world.set_index("iso_a3"),
  merged[(merged.m==MONTH)].set_index("iso_a3"),
  how="left",
  on=["iso_a3"]
)
fig, ax = plt.subplots(figsize=(12, 5)) #, facecolor='#ebf5f5');
_ = ax.axis('off');
#_ = ax.set_title(
#  f'igsn.org resolve request origins for {month_map[_month]} 2022',
#  fontdict={'fontsize': '10', 'fontweight' : '3'}
#);
_ = wmerged.plot(column='n',
  #cmap='viridis',
  cmap='Greys',
  linewidth=0.5,
  ax=ax,
  edgecolor='0.5',
  legend=True,
  norm=matplotlib.colors.LogNorm(vmin=wmerged.n.min(), vmax=wmerged.n.max()),
  missing_kwds={
    "color": "white",
    "label": "Missing values",
  })
```